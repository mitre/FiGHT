# The Docker image that will be used to build your app
image: node:16-bullseye
# Functions that should be executed before the build script is run

variables:
  GIT_STRATEGY: clone
  RUNNER_TAG: docker   
  FIGHT_CSV: yaml_generation_result.zip  
  FIGHT_DATA: fight_data.zip
  FIGHT_VERSION: 2.1.0-dev
  BRANCH: main
  PAGESBRANCH: develop
  FDEBRANCH: fde_no_subs

stages:
  - pages  # This stage contains all of the build steps, including uploading files for later use.

pages:
  stage: pages
  before_script:
    - env
    - apt-get update && apt-get -y upgrade
    - apt-get install -y python3 python3-pip curl zip rsync 
    - pip install --user requests
    #- python3 scripts/get_artifacts.py
    #- unzip artifacts.zip
    - if [ -d public/sandboxes/$GITLAB_USER_LOGIN/$CI_COMMIT_BRANCH ]; then rm -rf public/sandboxes/$GITLAB_USER_LOGIN/$CI_COMMIT_BRANCH; fi
    - mkdir -p public/sandboxes/$GITLAB_USER_LOGIN/$CI_COMMIT_BRANCH
    - find public
    # Ensure the git repo is up to date and do prelim submodule updates
    - git checkout $CI_COMMIT_BRANCH
    - git pull --rebase=preserve
    - git status
    - git submodule sync --recursive
    - git submodule foreach --recursive git fetch
    - git submodule update --init --recursive
    - git config --file=.gitmodules -l

    # 5g-security submodule updates
    - cd 5g-security.pages.mitre.org
         
    - git fetch
    - git status
    - git branch -r
    - git checkout $PAGESBRANCH
    - git status
    - mkdir -p static/fight-data/dist/schemas
    - cp ../fight_data_engine/static/* static/fight-data/dist/schemas
    - cd ..
    
    # fde submodule updates
    - cd fight_data_engine
    - git fetch
    - git status
    - git branch -r
    - git checkout $FDEBRANCH
    - git status
                        
    - cd ..


    # Run FiGHT Data Engine
    - pip install --user -r fight_data_engine/requirements.txt
    - pip install tabulate
                      
    - 'python3 fight_data_engine/make_fight_matrix_2.py --word_path threat_models/Word/ --csv_path threat_models/CSV/ --attack_stix_enterprise threat_models/enterprise-attack-14.1.json --attack_stix_mobile threat_models/mobile-attack-14.1.json --log_level debug --yaml_path fight.yaml --navigator_stix_path fight_stix_bundle.json'
    - 'python3 scripts/word_logs.py'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file newfile.log "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/build_matrix_log/$FIGHT_VERSION/build_matrix.log"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file fight.yaml "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/fight-yaml/$FIGHT_VERSION/fight.yaml"'
    # Publish the website
    - cp fight.yaml 5g-security.pages.mitre.org/static/fight-data/dist/ATLAS.yaml # Put the YAML where it needs to be
    - cd 5g-security.pages.mitre.org
    - sed -i "s/ROUTER_BASE || '\/'/ROUTER_BASE || '\/sandboxes\/$GITLAB_USER_LOGIN\/$CI_COMMIT_BRANCH'/g" nuxt.config.js
    - cat nuxt.config.js
    
    - npm install
    - npm run generate-gh
  script:
    # Position the generated site for pages deployment
    - cd ..
    - rsync --verbose --stats --progress --compress --recursive --times --perms --links 5g-security.pages.mitre.org/dist/* public/sandboxes/$GITLAB_USER_LOGIN/$CI_COMMIT_BRANCH
    - cp fight.yaml public/sandboxes/$GITLAB_USER_LOGIN/$CI_COMMIT_BRANCH # Put the YAML where it needs to be
    - cp status.html public/sandboxes/$GITLAB_USER_LOGIN/$CI_COMMIT_BRANCH
    - find public -iname \*attack\*.json -exec rm -f {} +
    - find public -iname \*.docx -exec rm -f {} +
    - du -ksh public/*
    - du -ksh public/sandboxes/*
    - du -ksh public/sandboxes/*/*
    - du -ksh public/sandboxes/*/*/*
    - du -ksh public/sandboxes/*/*/_nuxt/static/*
    - du -ksh public/sandboxes/*/*/*/*
    - zip -r $FIGHT_DATA public
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $FIGHT_DATA "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/fight-pages/$FIGHT_VERSION/$FIGHT_DATA"'
  artifacts:
    paths:
      # The folder that contains the files to be exposed at the Page URL
      - public
  tags:
    - $RUNNER_TAG
  
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never  # Prevent pipeline run for push event
    - when: always # Run pipeline for all other cases